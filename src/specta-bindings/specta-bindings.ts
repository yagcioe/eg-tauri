
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async persistHandle(fileHandle: string) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("persist_handle", { fileHandle }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async loadModel(filePath: string) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("load_model", { filePath }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async updateModel(fileHandle: string, model: ModelDto) : Promise<Result<string | null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("update_model", { fileHandle, model }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async openCsvFile(fileHandle: string) : Promise<Result<Partial<{ [key in string]: MyKonParticipationExportCsvRow[] }>, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("open_csv_file", { fileHandle }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async persistModel(filePath: string, model: ModelDto) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("persist_model", { filePath, model }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getModel(fileHandle: string) : Promise<Result<ModelDto | null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_model", { fileHandle }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/


export const events = __makeEvents__<{
demoEvent: DemoEvent
}>({
demoEvent: "demo-event"
})

/** user-defined constants **/



/** user-defined types **/

export type ApplicationDto = { id: number; student_id: number; company_id: number; representative_ids: number[] }
export type AvailabilityDto = { start: string; end: string }
export type BookingDto = { cabin: number; talks: TalkDto[] }
export type CompanyDto = { id: number; name: string; representatives: RepresentativeDto[] }
export type DemoEvent = { name: string }
export type ModelDto = { cabin_count: number; max_start_per_slot: number; slot_duration: string; talk_slot_count: number; minimum_representative_break_slot_count: number; minimum_student_break_slot_count: number; day_start_time: string; students: StudentDto[]; companies: CompanyDto[]; applications: ApplicationDto[]; slots: SlotDto[] }
export type MyKonParticipationExportCsvRow = { participation_id: number; status: string; user_id: number; full_name: string; email: string; event_id: number; event_name: string; event_beginn_date: string }
export type RepresentativeDto = { id: number; availability: AvailabilityDto[]; bookings: BookingDto[] }
export type SlotDto = { penalty: number }
export type StudentDto = { id: number; name: string; email: string; availability: AvailabilityDto[] }
export type TalkDto = { start_time: string; application_id: number }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
